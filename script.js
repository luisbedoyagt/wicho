const $=id=>{const element=document.getElementById(id);if(!element)console.error(`[Utilidades] Elemento con ID ${id} no encontrado en el DOM`);return element},formatPct=x=>(100*(isFinite(x)?x:0)).toFixed(1)+'%',formatDec=x=>isFinite(x)?x.toFixed(2):'0.00',parseNumberString=val=>{if(val===null||val===undefined)return 0;const s=String(val).trim().replace(/\s+/g,'');if((s.match(/\./g)||[]).length>0&&(s.match(/,/g)||[]).length>0)return Number(s.replace(/,/g,''))||0;if((s.match(/,/g)||[]).length>0&&(s.match(/\./g)||[]).length===0)return Number(s.replace(/,/g,'.'))||0;const n=Number(s);return isFinite(n)?n:0},normalizeStr=s=>(String(s||'')).toLowerCase().replace(/[^a-z0-9áéíóúüñÀ-ÖØ-öø-ÿ]+/g,''),WEBAPP_URL="https://script.google.com/macros/s/AKfycbzcrFrU34kJS0cjAq0YfUTU1XTfGUuEnBfohYJaljkcxRqlfa879ALvWsYHy7E8UVp0/exec",teamsByLeague={},allData={},currentEventPage=0;let eventInterval;const leagueNames={"fifa.worldq.conmebol":"Eliminatorias CONMEBOL","fifa.worldq.concacaf":"Eliminatorias CONCACAF","fifa.worldq.uefa":"Eliminatorias UEFA"},leagueCodeToName={"fifa.worldq.conmebol":"Eliminatorias_CONMEBOL","fifa.worldq.concacaf":"Eliminatorias_CONCACAF","fifa.worldq.uefa":"Eliminatorias_UEFA"},leagueRegions={"fifa.worldq.conmebol":"Eliminatorias Mundiales","fifa.worldq.concacaf":"Eliminatorias Mundiales","fifa.worldq.uefa":"Eliminatorias Mundiales"};
//Calcula el factorial de un número
function factorial(n){if(n<0)return 1;if(n===0||n===1)return 1;let res=1;for(let i=2;i<=n;i++)res*=i;return res}
//Calcula la probabilidad de Poisson
function poissonProbability(lambda,k){if(!isFinite(lambda)||lambda<=0)return k===0?1:0;if(k<0)return 0;return Math.exp(-lambda)*Math.pow(lambda,k)/factorial(k)}
//Normaliza datos de un equipo
function normalizeTeam(raw){if(!raw)return null;const r={name:raw.name||raw.team_name||raw.team||raw.club||''};if(!r.name)return null;r.pos=parseNumberString(raw.rank??raw.position??raw.pos??raw.position_in_table??0);r.gf=parseNumberString(raw.goalsFor??raw.goals_for??raw.gf??raw.gf_total??0);r.ga=parseNumberString(raw.goalsAgainst??raw.goals_against??raw.ga??raw.ga_total??0);r.pj=parseNumberString(raw.gamesPlayed??raw.played??raw.pj??raw.games??0);r.g=parseNumberString(raw.wins??raw.win??raw.g??raw.w??0);r.e=parseNumberString(raw.ties??raw.draws??raw.d??raw.e??0);r.p=parseNumberString(raw.losses??raw.lose??raw.l??0);r.points=parseNumberString(raw.points??raw.pts??(r.g*3+r.e)??0);r.gfHome=parseNumberString(raw.goalsForHome??raw.goals_for_home??raw.gfHome??0);r.gfAway=parseNumberString(raw.goalsForAway??raw.goals_for_away??raw.gfAway??0);r.gaHome=parseNumberString(raw.goalsAgainstHome??raw.goals_against_home??raw.gaHome??0);r.gaAway=parseNumberString(raw.goalsAgainstAway??raw.goals_against_away??raw.gaAway??0);r.pjHome=parseNumberString(raw.gamesPlayedHome??raw.played_home??raw.pjHome??0);r.pjAway=parseNumberString(raw.gamesPlayedAway??raw.played_away??raw.pjAway??0);r.winsHome=parseNumberString(raw.winsHome??raw.win_home??raw.home_wins??0);r.winsAway=parseNumberString(raw.winsAway??raw.win_away??raw.away_wins??0);r.tiesHome=parseNumberString(raw.tiesHome??raw.drawsHome??0);r.tiesAway=parseNumberString(raw.tiesAway??raw.drawsAway??0);r.lossesHome=parseNumberString(raw.lossesHome??raw.losesHome??0);r.lossesAway=parseNumberString(raw.lossesAway??raw.losesAway??0);r.logoUrl=raw.logoUrl||raw.logo||raw.badge||raw.team_logo||'';r.rank=r.pos;return r}
//Procesa texto plano para extraer pronósticos
function parsePlainText(text,matchData={local:'',visitante:''}){text=String(text||'');const aiProbs={home:null,draw:null,away:null},aiJustification={home:"Sin justificación detallada.",draw:"Sin justificación detallada.",away:"Sin justificación detallada."},probBlockPatterns=[/Probabilidades(?:\s*1X2)?\s*:\s*([\s\S]*?)(?:BTTS|Análisis|$)/i,/1X2\s*[:\-]\s*([\s\S]*?)(?:BTTS|Análisis|$)/i,/Prob\.?\s*1X2[\s\-:]*([\s\S]*?)(?:BTTS|Análisis|$)/i];let probsText=null;for(const p of probBlockPatterns){const m=text.match(p);if(m&&m[1]){probsText=m[1];break}}if(!probsText){const allPerc=(text.match(/(\d+(?:\.\d+)?)%/g)||[]).map(x=>x.replace('%',''));if(allPerc.length>=3){aiProbs.home=parseFloat(allPerc[0])/100;aiProbs.draw=parseFloat(allPerc[1])/100;aiProbs.away=parseFloat(allPerc[2])/100}}else{const percentages=(probsText.match(/(\d+(?:\.\d+)?)%/g)||[]).map(p=>parseFloat(p.replace('%','')));if(percentages.length>=3){aiProbs.home=percentages[0]/100;aiProbs.draw=percentages[1]/100;aiProbs.away=percentages[2]/100}else{const labelMatch=probsText.match(/(?:Local|1|Casa)[:\s]*?(\d+(?:\.\d+)?)%[\s\S]*?(?:Empate|X|Draw)[:\s]*?(\d+(?:\.\d+)?)%[\s\S]*?(?:Visitante|2|Fuera)[:\s]*?(\d+(?:\.\d+)?)%/i);if(labelMatch){aiProbs.home=parseFloat(labelMatch[1])/100;aiProbs.draw=parseFloat(labelMatch[2])/100;aiProbs.away=parseFloat(labelMatch[3])/100}}}const analysisPatterns=[/Análisis del Partido:\s*([\s\S]*?)(?:Probabilidades|$)/i,/Análisis:\s*([\s\S]*?)(?:Probabilidades|$)/i,/Razones:\s*([\s\S]*?)(?:Probabilidades|$)/i];let analysisText=null;for(const p of analysisPatterns){const m=text.match(p);if(m&&m[1]){analysisText=m[1].trim();break}}if(analysisText){const localRegex=new RegExp(`${escapeRegex(matchData.local||'')}[:\\-\\s]*([\\s\\S]*?)(?:Empate[:\\-\\s]|${escapeRegex(matchData.visitante||'')}[:\\-\\s]|$)`, 'i'),drawRegex=/Empate[:\-\s]*([\s\S]*?)(?:(?:[^:]+:)|$)/i,awayRegex=new RegExp(`${escapeRegex(matchData.visitante||'')}[:\\-\\s]*([\\s\\S]*?)(?:Probabilidades|$)`, 'i'),localJust=analysisText.match(localRegex),drawJust=analysisText.match(drawRegex),awayJust=analysisText.match(awayRegex);if(localJust&&localJust[1])aiJustification.home=localJust[1].trim();if(drawJust&&drawJust[1])aiJustification.draw=drawJust[1].trim();if(awayJust&&awayJust[1])aiJustification.away=awayJust[1].trim()}const bttsMatch=text.match(/BTTS\s*(?:[:\-])?\s*(?:Si|Sí|Yes|S):?\s*(\d+(?:\.\d+)?)%/i)||text.match(/Both\s*Teams\s*To\s*Score\s*(?:[:\-])?\s*(\d+(?:\.\d+)?)%/i),bttsNoMatch=text.match(/BTTS\s*(?:[:\-])?\s*(?:No):?\s*(\d+(?:\.\d+)?)%/i),over25=text.match(/(?:Mas|Más|Over)\s*2\.?5[:\-\s\(]*?(\d+(?:\.\d+)?)%/i)||text.match(/(\d+(?:\.\d+)?)%\s*(?:over|más|mas)\s*2\.?5/i),under25=text.match(/(?:Menos|Under)\s*2\.?5[:\-\s\(]*?(\d+(?:\.\d+)?)%/i)||text.match(/(\d+(?:\.\d+)?)%\s*(?:under|menos)\s*2\.?5/i);return{"1X2":{victoria_local:{probabilidad:aiProbs.home!==null?(aiProbs.home*100).toFixed(0)+'%':'N/D',justificacion:aiJustification.home},empate:{probabilidad:aiProbs.draw!==null?(aiProbs.draw*100).toFixed(0)+'%':'N/D',justificacion:aiJustification.draw},victoria_visitante:{probabilidad:aiProbs.away!==null?(aiProbs.away*100).toFixed(0)+'%':'N/D',justificacion:aiJustification.away}},BTTS:{si:{probabilidad:bttsMatch?(parseFloat(bttsMatch[1]).toFixed(0)+'%'):'N/D',justificacion:""},no:{probabilidad:bttsNoMatch?(parseFloat(bttsNoMatch[1]).toFixed(0)+'%'):'N/D',justificacion:""}},Goles:{mas_2_5:{probabilidad:over25?(parseFloat(over25[1]).toFixed(0)+'%'):'N/D',justificacion:""},menos_2_5:{probabilidad:under25?(parseFloat(under25[1]).toFixed(0)+'%'):'N/D',justificacion:""}}}}
//Escapa caracteres especiales para expresiones regulares
function escapeRegex(s){if(!s)return'';return s.replace(/[.*+?^${}()|[\]\\]/g,'\\$&')}
//Obtiene y normaliza todos los datos desde la API
async function fetchAllData(){const leagueSelect=$('leagueSelect');if(leagueSelect){leagueSelect.innerHTML='<option value="">Cargando datos...</option>';leagueSelect.style.display='block'}try{const res=await fetch(`${WEBAPP_URL}?tipo=todo&update=false`);if(!res.ok){const errorText=await res.text();throw new Error(`Error HTTP ${res.status}: ${res.statusText}. Respuesta: ${errorText}`)}allData=await res.json();if(!allData||(!allData.calendario&&!allData.ligas))throw new Error('Estructura de datos inválida: la respuesta está vacía o faltan "calendario" o "ligas".');const normalized={},sourceLigas=allData.ligas||{};for(const key in sourceLigas){if(!Object.prototype.hasOwnProperty.call(sourceLigas,key))continue;const arr=Array.isArray(sourceLigas[key])?sourceLigas[key]:[];normalized[key]=arr.map(normalizeTeam).filter(t=>t&&t.name)}const alias={};for(const key in normalized){alias[key.toLowerCase()]=normalized[key];alias[(key.replace(/\s+/g,'').toLowerCase())]=normalized[key]}for(const code in leagueCodeToName){const nameKey=leagueCodeToName[code];if(normalized[code]&&normalized[code].length){teamsByLeague[code]=normalized[code]}else if(normalized[nameKey]&&normalized[nameKey].length){teamsByLeague[code]=normalized[nameKey]}else if(allData.ligas&&allData.ligas[nameKey]&&Array.isArray(allData.ligas[nameKey])){teamsByLeague[code]=allData.ligas[nameKey].map(normalizeTeam).filter(Boolean)}else if(alias[nameKey.toLowerCase()]){teamsByLeague[code]=alias[nameKey.toLowerCase()]}else if(alias[code.toLowerCase()]){teamsByLeague[code]=alias[code.toLowerCase()]}else{const fallback=Object.keys(normalized).find(k=>k.toLowerCase().includes(code.split('.')[0]));if(fallback)teamsByLeague[code]=normalized[fallback]}if(!teamsByLeague[code])teamsByLeague[code]=[]}try{localStorage.setItem('allData',JSON.stringify(allData))}catch(e){}return allData}catch(err){const errorMsg=`<div class="error"><strong>Error:</strong> No se pudieron cargar los datos de la API. Verifica la conexión a la hoja de Google Sheets o el endpoint de la API. Detalle: ${err.message}</div>`,details=$('details');if(details)details.innerHTML=errorMsg;if(leagueSelect){leagueSelect.innerHTML='<option value="">Error al cargar ligas</option>';leagueSelect.style.display='block'}return{}}}
//Muestra los eventos próximos de la liga seleccionada
function displaySelectedLeagueEvents(leagueCode){const selectedEventsList=$('selected-league-events');if(!selectedEventsList)return;if(eventInterval){clearInterval(eventInterval);eventInterval=null}selectedEventsList.innerHTML='';if(!leagueCode||!allData.calendario){selectedEventsList.innerHTML='<div class="event-item placeholder"><span>Selecciona una liga para ver eventos próximos.</span></div>';return}const ligaName=leagueCodeToName[leagueCode]||leagueCode,events=allData.calendario[ligaName]||allData.calendario[leagueCode]||allData.calendario[leagueCodeToName[leagueCode]]||[];if(!Array.isArray(events)||events.length===0){selectedEventsList.innerHTML='<div class="event-item placeholder"><span>No hay eventos próximos para esta liga.</span></div>';return}const sanitizedEvents=events.map(ev=>{try{if(ev&&ev.pronostico_json&&typeof ev.pronostico_json==='string')ev.pronostico_json=JSON.parse(ev.pronostico_json)}catch(e){}return ev}).filter(ev=>ev&&(ev.local||ev.home||ev.team_home)&&(ev.visitante||ev.away||ev.team_away));if(sanitizedEvents.length===0){selectedEventsList.innerHTML='<div class="event-item placeholder"><span>No hay eventos con datos válidos.</span></div>';return}const eventsPerPage=3,totalPages=Math.ceil(sanitizedEvents.length/eventsPerPage);let currentPage=0;function parseEventDateString(dateStr){if(!dateStr)return null;let s=String(dateStr).trim();if(s.includes('T')||s.endsWith('Z')||s.includes('+')){const d=new Date(s);if(!isNaN(d.getTime()))return d}if(/\d{4}[-\\/]\d{2}[-\\/]\d{2}/.test(s)&&/\d{1,2}:\d{2}/.test(s)){s=s.replace(' ','T');if(!s.toLowerCase().includes('z')&&!/[+-]\d{2}:?\d{2}/.test(s))s+='Z';const d=new Date(s);if(!isNaN(d.getTime()))return d}const parts=s.match(/(\d{1,2})\/(\d{1,2})\/(\d{4})\s+(\d{1,2}:\d{2})/);if(parts){const iso=`${parts[3]}-${String(parts[2]).padStart(2,'0')}-${String(parts[1]).padStart(2,'0')}T${parts[4]}Z`,d=new Date(iso);if(!isNaN(d.getTime()))return d}const fallback=new Date(s);if(!isNaN(fallback.getTime()))return fallback;return null}function showCurrentPage(){const startIndex=currentPage*eventsPerPage,eventsToShow=sanitizedEvents.slice(startIndex,startIndex+eventsPerPage),currentItems=selectedEventsList.querySelectorAll('.event-item');if(currentItems.length>0)currentItems.forEach(item=>{item.classList.remove('slide-in');item.classList.add('slide-out')});setTimeout(()=>{selectedEventsList.innerHTML='';eventsToShow.forEach((event,index)=>{const div=document.createElement('div');div.className='event-item slide-in';div.style.animationDelay=`${index*0.1}s`;const localName=event.local||event.home||event.team_home||'Local',awayName=event.visitante||event.away||event.team_away||'Visitante';div.dataset.homeTeam=localName;div.dataset.awayTeam=awayName;let eventDateTime,isInProgress=false;try{const parsedDate=parseEventDateString(event.fecha||event.date||event.datetime||'');if(!parsedDate)throw new Error("Fecha inválida");const now=new Date(),matchDuration=120*60*1000;if(now>=parsedDate&&now<new Date(parsedDate.getTime()+matchDuration))isInProgress=true;const dateOptions={year:'numeric',month:'2-digit',day:'2-digit',timeZone:'America/Guatemala'},timeOptions={hour:'2-digit',minute:'2-digit',hour12:false,timeZone:'America/Guatemala'},formattedDate=parsedDate.toLocaleDateString('es-ES',dateOptions),formattedTime=parsedDate.toLocaleTimeString('es-ES',timeOptions);eventDateTime=`${formattedDate} ${formattedTime} (GT)`}catch(err){eventDateTime=`${event.fecha||event.date||'Fecha no disponible'} (Hora no disponible)`}let statusText=isInProgress?' - Evento en Juego':'';div.innerHTML=`<strong>${localName} vs. ${awayName}</strong><span>Estadio: ${event.estadio||event.stadium||'Por confirmar'}</span><span>${eventDateTime}${statusText}</span>`;if(isInProgress){div.classList.add('in-progress');div.style.cursor='not-allowed';div.title='Evento en curso, no seleccionable'}else{div.addEventListener('click',()=>{selectEvent(localName,awayName)})}selectedEventsList.appendChild(div)});currentPage=(currentPage+1)%totalPages},500)}showCurrentPage();if(totalPages>1)eventInterval=setInterval(showCurrentPage,10000)}
//Inicializa la aplicación y configura los eventos
async function init(){clearAll();const leagueSelect=$('leagueSelect'),teamHomeSelect=$('teamHome'),teamAwaySelect=$('teamAway');if(!leagueSelect||!teamHomeSelect||!teamAwaySelect){const details=$('details');if(details)details.innerHTML='<div class="error"><strong>Error:</strong> Problema con la interfaz HTML. Verifica que los elementos select (leagueSelect, teamHome, teamAway) existan.</div>';return}leagueSelect.style.display='block';leagueSelect.innerHTML='<option value="">Cargando ligas...</option>';await fetchAllData();if(!allData.ligas||!Object.keys(allData.ligas).length){leagueSelect.innerHTML='<option value="">No hay ligas disponibles</option>';const details=$('details');if(details)details.innerHTML='<div class="warning"><strong>Advertencia:</strong> No se encontraron ligas disponibles. Verifica la conexión con la API o los datos en la hoja de cálculo.</div>';return}leagueSelect.innerHTML='<option value="">-- Selecciona liga --</option>';const regionsMap={};Object.keys(leagueCodeToName).forEach(code=>{const region=leagueRegions[code]||'Otras Ligas';if(!regionsMap[region])regionsMap[region]=[];regionsMap[region].push(code)});const customOrder=["Europa","Sudamérica","Norteamérica","Centroamérica","Asia","Copas Internacionales","Eliminatorias Mundiales","Otras Ligas"],sortedRegions=Object.keys(regionsMap).sort((a,b)=>{const aIndex=customOrder.indexOf(a),bIndex=customOrder.indexOf(b);if(aIndex===-1&&bIndex===-1)return a.localeCompare(b);if(aIndex===-1)return 1;if(bIndex===-1)return-1;return aIndex-bIndex});sortedRegions.forEach(regionName=>{const optgroup=document.createElement('optgroup');optgroup.label=regionName;const codes=regionsMap[regionName].slice().sort((a,b)=>(leagueNames[a]||a).localeCompare(leagueNames[b]||b));codes.forEach(code=>{const opt=document.createElement('option');opt.value=code;opt.textContent=leagueNames[code]||code;optgroup.appendChild(opt)});if(optgroup.children.length>0)leagueSelect.appendChild(optgroup)});if(leagueSelect.children.length<=1){leagueSelect.innerHTML='<option value="">No hay ligas disponibles</option>';const details=$('details');if(details)details.innerHTML='<div class="warning"><strong>Advertencia:</strong> No se encontraron ligas disponibles. Verifica la conexión con la API o los datos en la hoja de cálculo.</div>'}else{leagueSelect.style.display='block'}leagueSelect.addEventListener('change',onLeagueChange);teamHomeSelect.addEventListener('change',()=>{if(restrictSameTeam()){fillTeamData($('teamHome').value,$('leagueSelect').value,'Home');calculateAll()}});teamAwaySelect.addEventListener('change',()=>{if(restrictSameTeam()){fillTeamData($('teamAway').value,$('leagueSelect').value,'Away');calculateAll()}});const resetButton=$('reset');if(resetButton)resetButton.addEventListener('click',clearAll);document.addEventListener('DOMContentLoaded',init)}
//Maneja el cambio de selección de liga
function onLeagueChange(){const code=$('leagueSelect').value,teamHomeSelect=$('teamHome'),teamAwaySelect=$('teamAway');if(!teamHomeSelect||!teamAwaySelect)return;teamHomeSelect.innerHTML='<option value="">Cargando equipos...</option>';teamAwaySelect.innerHTML='<option value="">Cargando equipos...</option>';if(!code||!teamsByLeague[code]||teamsByLeague[code].length===0){clearTeamData('Home');clearTeamData('Away');const details=$('details');if(details)details.innerHTML='<div class="warning"><strong>Advertencia:</strong> No hay datos disponibles para esta liga.</div>';displaySelectedLeagueEvents('');return}const teams=teamsByLeague[code].slice().sort((a,b)=>a.name.localeCompare(b.name)),fragmentHome=document.createDocumentFragment(),defaultOptionHome=document.createElement('option');defaultOptionHome.value='';defaultOptionHome.textContent='-- Selecciona equipo --';fragmentHome.appendChild(defaultOptionHome);const fragmentAway=document.createDocumentFragment(),defaultOptionAway=document.createElement('option');defaultOptionAway.value='';defaultOptionAway.textContent='-- Selecciona equipo --';fragmentAway.appendChild(defaultOptionAway);teams.forEach(t=>{const opt1=document.createElement('option');opt1.value=t.name;opt1.textContent=t.name;fragmentHome.appendChild(opt1);const opt2=document.createElement('option');opt2.value=t.name;opt2.textContent=t.name;fragmentAway.appendChild(opt2)});teamHomeSelect.innerHTML='';teamAwaySelect.innerHTML='';teamHomeSelect.appendChild(fragmentHome);teamAwaySelect.appendChild(fragmentAway);clearTeamData('Home');clearTeamData('Away');calculateAll();displaySelectedLeagueEvents(code)}
//Selecciona un evento y llena los selectores de equipos
function selectEvent(homeTeamName,awayTeamName){const teamHomeSelect=$('teamHome'),teamAwaySelect=$('teamAway'),leagueCode=$('leagueSelect').value;const homeOption=Array.from(teamHomeSelect.options).find(opt=>normalizeStr(opt.text)===normalizeStr(homeTeamName))||Array.from(teamHomeSelect.options).find(opt=>normalizeStr(opt.text).includes(normalizeStr(homeTeamName))||normalizeStr(homeTeamName).includes(normalizeStr(opt.text)));if(homeOption)teamHomeSelect.value=homeOption.value;const awayOption=Array.from(teamAwaySelect.options).find(opt=>normalizeStr(opt.text)===normalizeStr(awayTeamName))||Array.from(teamAwaySelect.options).find(opt=>normalizeStr(opt.text).includes(normalizeStr(awayTeamName))||normalizeStr(awayTeamName).includes(normalizeStr(opt.text)));if(awayOption)teamAwaySelect.value=awayOption.value;if(teamHomeSelect.value&&teamAwaySelect.value){fillTeamData(teamHomeSelect.value,leagueCode,'Home');fillTeamData(teamAwaySelect.value,leagueCode,'Away');calculateAll()}else{const details=$('details');if(details)details.innerHTML=`<div class="error"><strong>Error:</strong> No se pudo encontrar uno o ambos equipos en la lista de la liga.</div>`}}
//Evita seleccionar el mismo equipo para local y visitante
function restrictSameTeam(){const teamHome=$('teamHome')?.value,teamAway=$('teamAway')?.value;if(teamHome&&teamAway&&teamHome===teamAway){const details=$('details');if(details)details.innerHTML='<div class="error"><strong>Error:</strong> No puedes seleccionar el mismo equipo para local y visitante.</div>';if(document.activeElement===$('teamHome')){$('teamHome').value='';clearTeamData('Home')}else{$('teamAway').value='';clearTeamData('Away')}return false}return true}
//Limpia los datos de un equipo en la interfaz
function clearTeamData(type){const typeLower=type.toLowerCase(),posEl=$(`pos${type}`),gfEl=$(`gf${type}`),gaEl=$(`ga${type}`),winEl=$(`winRate${type}`);if(posEl)posEl.textContent='--';if(gfEl)gfEl.textContent='--';if(gaEl)gaEl.textContent='--';if(winEl)winEl.textContent='--';const box=$(`form${type}Box`);if(box)box.innerHTML=`<div class="team-details"><div class="stat-section"><span class="section-title">General</span><div class="stat-metrics"><span>PJ: 0</span><span>Puntos: 0</span><span>DG: 0</span></div></div><div class="stat-section"><span class="section-title">Local</span><div class="stat-metrics"><span>PJ: 0</span><span>PG: 0</span><span>DG: 0</span></div></div><div class="stat-section"><span class="section-title">Visitante</span><div class="stat-metrics"><span>PJ: 0</span><span>PG: 0</span><span>DG: 0</span></div></div></div>`;const cardHeader=$(`card-${typeLower}`)?.querySelector('.card-header'),logoImg=cardHeader?cardHeader.querySelector('.team-logo'):null;if(logoImg)logoImg.remove()}
//Limpia toda la interfaz
function clearAll(){document.querySelectorAll('.stat-value').forEach(el=>el.textContent='--');document.querySelectorAll('select').forEach(s=>s.selectedIndex=0);['pHome','pDraw','pAway','pBTTS','pO25'].forEach(id=>{const el=$(id);if(el)el.textContent='--'});const detailedPrediction=$('detailed-prediction'),details=$('details'),suggestion=$('suggestion'),combinedPrediction=$('combined-prediction');if(detailedPrediction)detailedPrediction.innerHTML='<p>Esperando pronóstico detallado...</p>';if(details)details.innerHTML='Detalles del Pronóstico';if(suggestion)suggestion.innerHTML='<p>Esperando datos...</p>';if(combinedPrediction)combinedPrediction.innerHTML='<p>Esperando pronóstico combinado...</p>';clearTeamData('Home');clearTeamData('Away');displaySelectedLeagueEvents('')}
//Busca un equipo en la liga especificada
function findTeam(leagueCode,teamName){if(!teamsByLeague[leagueCode])return null;const list=teamsByLeague[leagueCode],normalizedName=normalizeStr(teamName);let found=list.find(t=>normalizeStr(t.name)===normalizedName);if(!found)found=list.find(t=>normalizeStr(t.name).includes(normalizedName)||normalizedName.includes(normalizeStr(t.name)));return found||null}
//Llena los datos de un equipo en la interfaz
function fillTeamData(teamName,leagueCode,type){const t=findTeam(leagueCode,teamName),typeLower=type.toLowerCase();if(!t){const details=$('details');if(details)details.innerHTML=`<div class="error"><strong>Error:</strong> Equipo ${teamName} no encontrado en la liga seleccionada.</div>`;return}$(`pos${type}`).textContent=t.pos||'--';$(`gf${type}`).textContent=formatDec((t.gf||0)/(t.pj||1));$(`ga${type}`).textContent=formatDec((t.ga||0)/(t.pj||1));$(`winRate${type}`).textContent=formatPct(t.pj?(t.g||0)/(t.pj||1):0);const dg=(t.gf||0)-(t.ga||0),dgHome=(t.gfHome||0)-(t.gaHome||0),dgAway=(t.gfAway||0)-(t.gaAway||0),box=$(`form${type}Box`);if(box)box.innerHTML=`<div class="team-details"><div class="stat-section"><span class="section-title">General</span><div class="stat-metrics"><span>PJ: ${t.pj||0}</span><span>Puntos: ${t.points||0}</span><span>DG: ${dg>=0?'+'+dg:dg||0}</span></div></div><div class="stat-section"><span class="section-title">Local</span><div class="stat-metrics"><span>PJ: ${t.pjHome||0}</span><span>PG: ${t.winsHome||0}</span><span>DG: ${dgHome>=0?'+'+dgHome:dgHome||0}</span></div></div><div class="stat-section"><span class="section-title">Visitante</span><div class="stat-metrics"><span>PJ: ${t.pjAway||0}</span><span>PG: ${t.winsAway||0}</span><span>DG: ${dgAway>=0?'+'+dgAway:dgAway||0}</span></div></div></div>`;const cardHeader=$(`card-${typeLower}`)?.querySelector('.card-header');if(cardHeader){let logoImg=cardHeader.querySelector('.team-logo');if(!logoImg){logoImg=document.createElement('img');logoImg.className='team-logo';logoImg.alt=`Logo de ${t.name}`;const h3=cardHeader.querySelector('h3');if(h3)h3.insertAdjacentElement('beforebegin',logoImg)}logoImg.src=t.logoUrl||'';logoImg.style.display=t.logoUrl?'inline-block':'none'}}
//Calcula probabilidades usando el modelo Dixon-Coles
function dixonColesProbabilities(tH,tA,league){const rho=-0.11,shrinkageFactor=1.0,teams=teamsByLeague[league]||[];let totalGames=0,totalGf=0,totalGa=0,totalGfHome=0,totalGaHome=0,totalGfAway=0,totalGaAway=0;teams.forEach(t=>{totalGames+=t.pj||0;totalGf+=t.gf||0;totalGa+=t.ga||0;totalGfHome+=t.gfHome||0;totalGaHome+=t.gaHome||0;totalGfAway+=t.gfAway||0;totalGaAway+=t.gaAway||0});const denomGames=totalGames||teams.reduce((s,x)=>s+(x.pj||0),0)||1,leagueAvgGfHome=totalGfHome/denomGames||1,leagueAvgGaAway=totalGaAway/denomGames||1,leagueAvgGfAway=totalGfAway/denomGames||1,leagueAvgGaHome=totalGaHome/denomGames||1,safeDiv=(num,den)=>den?num/den:0,homeAttackRaw=safeDiv(tH.gfHome||0,tH.pjHome||1),homeDefenseRaw=safeDiv(tH.gaHome||0,tH.pjHome||1),awayAttackRaw=safeDiv(tA.gfAway||0,tA.pjAway||1),awayDefenseRaw=safeDiv(tA.gaAway||0,tA.pjAway||1),homeAttack=(homeAttackRaw/(leagueAvgGfHome||1))*shrinkageFactor,homeDefense=(homeDefenseRaw/(leagueAvgGaHome||1))*shrinkageFactor,awayAttack=(awayAttackRaw/(leagueAvgGfAway||1))*shrinkageFactor,awayDefense=(awayDefenseRaw/(leagueAvgGaAway||1))*shrinkageFactor,expectedHomeGoals=homeAttack*awayDefense*leagueAvgGfHome,expectedAwayGoals=awayAttack*homeDefense*leagueAvgGfAway;let homeWin=0,draw=0,awayWin=0;for(let i=0;i<=10;i++){for(let j=0;j<=10;j++){const prob=poissonProbability(expectedHomeGoals,i)*poissonProbability(expectedAwayGoals,j);if(i>j)homeWin+=prob;else if(i===j)draw+=prob;else awayWin+=prob}}const tau=(scoreH,scoreA)=>{if(scoreH===0&&scoreA===0)return 1-(homeAttack*awayDefense*rho);if(scoreH===0&&scoreA===1)return 1+(homeAttack*rho);if(scoreH===1&&scoreA===0)return 1+(awayDefense*rho);if(scoreH===1&&scoreA===1)return 1-rho;return 1};let adjustedDraw=0;for(let i=0;i<=10;i++)adjustedDraw+=poissonProbability(expectedHomeGoals,i)*poissonProbability(expectedAwayGoals,i)*tau(i,i);const total=homeWin+draw+awayWin;if(total>0){const scale=1/total;homeWin*=scale;draw*=scale;awayWin*=scale}else{homeWin=draw=awayWin=1/3}const adjustedTotal=homeWin+adjustedDraw+awayWin;if(adjustedTotal>0){const scale=1/adjustedTotal;homeWin*=scale;adjustedDraw*=scale;awayWin*=scale}const pGoal0Home=poissonProbability(expectedHomeGoals,0),pGoal0Away=poissonProbability(expectedAwayGoals,0),pBTTSH=1-pGoal0Home-pGoal0Away+(pGoal0Home*pGoal0Away),sumUpTo2Home=poissonProbability(expectedHomeGoals,0)+poissonProbability(expectedHomeGoals,1)+poissonProbability(expectedHomeGoals,2),sumUpTo2Away=poissonProbability(expectedAwayGoals,0)+poissonProbability(expectedAwayGoals,1)+poissonProbability(expectedAwayGoals,2),pO25H=1-(sumUpTo2Home*sumUpTo2Away);return{finalHome:homeWin,finalDraw:adjustedDraw,finalAway:awayWin,pBTTSH,pO25H}}
//Combina pronósticos estadísticos y de IA
function getCombinedPrediction(stats,event,matchData){const combined={};let ai=null;try{if(event&&event.pronostico_json){ai=typeof event.pronostico_json==='string'?JSON.parse(event.pronostico_json):event.pronostico_json}else if(event&&event.pronostico){ai=parsePlainText(event.pronostico||'',matchData);ai={"1X2":{victoria_local:{probabilidad:ai["1X2"]?.victoria_local?.probabilidad||ai["1X2"]?.victoria_local||'N/D',justificacion:ai["1X2"]?.victoria_local?.justificacion||''},empate:{probabilidad:ai["1X2"]?.empate?.probabilidad||ai["1X2"]?.empate||'N/D',justificacion:ai["1X2"]?.empate?.justificacion||''},victoria_visitante:{probabilidad:ai["1X2"]?.victoria_visitante?.probabilidad||ai["1X2"]?.victoria_visitante||'N/D',justificacion:ai["1X2"]?.victoria_visitante?.justificacion||''}}}}catch(e){}if(!ai||!ai["1X2"]||Object.values(ai["1X2"]).every(p=>!p?.probabilidad)){combined.header="Análisis Estadístico Principal";combined.body=`<p>No se encontró un pronóstico de IA válido. El análisis se basa únicamente en datos estadísticos.</p>`;return combined}const aiProbs={home:safeParseProbability(ai["1X2"].victoria_local?.probabilidad),draw:safeParseProbability(ai["1X2"].empate?.probabilidad),away:safeParseProbability(ai["1X2"].victoria_visitante?.probabilidad)},statProbs={home:stats.finalHome,draw:stats.finalDraw,away:stats.finalAway},statMax=Math.max(statProbs.home,statProbs.draw,statProbs.away),aiMax=Math.max(aiProbs.home,aiProbs.draw,aiProbs.away),statBest=Object.keys(statProbs).find(k=>statProbs[k]===statMax),aiBest=Object.keys(aiProbs).find(k=>aiProbs[k]===aiMax);let header="Pronóstico Combinado (Estadística + IA)",body=`<p><strong>Modelo Estadístico:</strong> Victoria Local: ${formatPct(statProbs.home)}, Empate: ${formatPct(statProbs.draw)}, Victoria Visitante: ${formatPct(statProbs.away)}.</p><p><strong>Modelo de IA:</strong> Victoria Local: ${formatPct(aiProbs.home)}, Empate: ${formatPct(aiProbs.draw)}, Victoria Visitante: ${formatPct(aiProbs.away)}.</p>`;if(statBest===aiBest){const resultText=statBest==='home'?`Victoria ${matchData.local}`:statBest==='draw'?'Empate':`Victoria ${matchData.visitante}`,reason=ai["1X2"][statBest==='home'?'victoria_local':statBest==='draw'?'empate':'victoria_visitante']?.justificacion||"Sin justificación detallada.";header=`¡Consenso! Apuesta Fuerte en la ${resultText} ⭐`;body+=`<p>Ambos modelos coinciden en que la <strong>${resultText}</strong> es el resultado más probable.</p><p><strong>Justificación de la IA:</strong> ${reason}</p>`}else{const statResult=statBest==='home'?`Victoria ${matchData.local}`:statBest==='draw'?'Empate':`Victoria ${matchData.visitante}`,aiResult=aiBest==='home'?`Victoria ${matchData.local}`:aiBest==='draw'?'Empate':`Victoria ${matchData.visitante}`;header="Discrepancia en Pronósticos ⚠️";body+=`<p>El modelo estadístico (${formatPct(statMax)}) favorece la <strong>${statResult}</strong>, mientras que la IA (${formatPct(aiMax)}) se inclina por la <strong>${aiResult}</strong>.</p><p><strong>Análisis de la IA:</strong> ${ai["1X2"][aiBest==='home'?'victoria_local':aiBest==='draw'?'empate':'victoria_visitante']?.justificacion||"Sin justificación detallada."}</p><p>Se recomienda cautela. Analiza la justificación de la IA para entender los factores externos que no considera el modelo estadístico.</p>`}combined.header=header;combined.body=body;return combined}
//Parsea probabilidades de manera segura
function safeParseProbability(p){if(!p&&p!==0)return 0;if(typeof p==='number')return p;const s=String(p).trim().replace('%',''),num=parseFloat(s);if(isFinite(num))return num/100;return 0}
//Calcula y muestra todas las probabilidades y recomendaciones
function calculateAll(){const leagueCode=$('leagueSelect')?.value,teamHome=$('teamHome')?.value,teamAway=$('teamAway')?.value;if(!leagueCode||!teamHome||!teamAway){const details=$('details');if(details)details.innerHTML='<div class="warning"><strong>Advertencia:</strong> Selecciona una liga y ambos equipos para calcular el pronóstico.</div>';return}const tH=findTeam(leagueCode,teamHome),tA=findTeam(leagueCode,teamAway);if(!tH||!tA){const details=$('details');if(details)details.innerHTML=`<div class="error"><strong>Error:</strong> Uno o ambos equipos no encontrados en la liga seleccionada.</div>`;return}const stats=dixonColesProbabilities(tH,tA,leagueCode),ligaName=leagueCodeToName[leagueCode],calendario=allData.calendario||{},eventsForLeague=calendario[ligaName]||calendario[leagueCode]||[],event=(Array.isArray(eventsForLeague)?eventsForLeague:[]).find(e=>{const local=e.local||e.home||e.team_home||'',away=e.visitante||e.away||e.team_away||'';return normalizeStr(local)===normalizeStr(teamHome)&&normalizeStr(away)===normalizeStr(teamAway)}),matchData={local:teamHome,visitante:teamAway},probabilities=[{label:'Local',value:stats.finalHome,id:'pHome',type:'Resultado'},{label:'Empate',value:stats.finalDraw,id:'pDraw',type:'Resultado'},{label:'Visitante',value:stats.finalAway,id:'pAway',type:'Resultado'},{label:'Ambos Anotan',value:event&&event.pronostico_json?safeParseProbability(event.pronostico_json?.BTTS?.si?.probabilidad||event.pronostico_json?.BTTS?.si?.probabilidad):stats.pBTTSH,id:'pBTTS',type:'Mercado'},{label:'Más de 2.5 goles',value:event&&event.pronostico_json?safeParseProbability(event.pronostico_json?.Goles?.mas_2_5?.probabilidad):stats.pO25H,id:'pO25',type:'Mercado'}];probabilities.forEach(p=>{const el=$(p.id);if(el)el.textContent=formatPct(p.value)});const recommendations=probabilities.filter(p=>p.value>=0.3).sort((a,b)=>b.value-a.value).slice(0,3);let suggestionText='<h3>Recomendaciones de Apuesta</h3><ul>';if(recommendations.length===0)suggestionText+=`<li>No hay recomendaciones fuertes (>=30%).</li>`;else recommendations.forEach(r=>suggestionText+=`<li><strong>${r.label} (${formatPct(r.value)})</strong> - ${r.type}</li>`);suggestionText+='</ul>';const suggestion=$('suggestion');if(suggestion)suggestion.innerHTML=suggestionText;const detailedPredictionBox=$('detailed-prediction');if(event&&event.pronostico_json){const json=(typeof event.pronostico_json==='string')?(()=>{try{return JSON.parse(event.pronostico_json)}catch(e){return event.pronostico_json}})():event.pronostico_json;let html=`<h3>Análisis de la IA</h3><div class="ia-prediction"><h4>Análisis del Partido: ${teamHome} vs. ${teamAway}</h4>`;const oneX2=json["1X2"]||json["1x2"]||{};html+=`<p><strong>${teamHome}:</strong> ${oneX2.victoria_local?.justificacion||oneX2.home?.justificacion||oneX2.local?.justificacion||'Sin justificación.'} (Probabilidad: ${oneX2.victoria_local?.probabilidad||oneX2.home?.probabilidad||'N/D'})</p>`;html+=`<p><strong>Empate:</strong> ${oneX2.empate?.justificacion||oneX2.draw?.justificacion||'Sin justificación.'} (Probabilidad: ${oneX2.empate?.probabilidad||oneX2.draw?.probabilidad||'N/D'})</p>`;html+=`<p><strong>${teamAway}:</strong> ${oneX2.victoria_visitante?.justificacion||oneX2.away?.justificacion||'Sin justificación.'} (Probabilidad: ${oneX2.victoria_visitante?.probabilidad||oneX2.away?.probabilidad||'N/D'})</p>`;const btts=json.BTTS||json.btts||{};html+=`<h4>Ambos Anotan (BTTS):</h4>`;html+=`<p><strong>Sí:</strong> ${btts.si?.probabilidad||btts.yes?.probabilidad||'N/D'} ${btts.si?.justificacion?` - ${btts.si.justificacion}`:''}</p>`;html+=`<p><strong>No:</strong> ${btts.no?.probabilidad||'N/D'} ${btts.no?.justificacion?` - ${btts.no.justificacion}`:''}</p>`;const goles=json.Goles||json.goles||{};html+=`<h4>Goles Totales (Más/Menos 2.5):</h4>`;html+=`<p><strong>Más de 2.5:</strong> ${goles.mas_2_5?.probabilidad||goles.over?.probabilidad||'N/D'} ${goles.mas_2_5?.justificacion?` - ${goles.mas_2_5.justificacion}`:''}</p>`;html+=`<p><strong>Menos de 2.5:</strong> ${goles.menos_2_5?.probabilidad||goles.under?.probabilidad||'N/D'} ${goles.menos_2_5?.justificacion?` - ${goles.menos_2_5.justificacion}`:''}</p>`;html+=`</div>`;if(detailedPredictionBox)detailedPredictionBox.innerHTML=html}else if(event&&event.pronostico){const formattedPrediction=String(event.pronostico).replace(/\n/g,'<br>').replace(/###\s*(.*)/g,'<h4>$1</h4>');if(detailedPredictionBox)detailedPredictionBox.innerHTML=`<h3>Análisis de la IA</h3><div class="ia-prediction">${formattedPrediction}</div>`}else if(detailedPredictionBox)detailedPredictionBox.innerHTML=`<p>No hay un pronóstico de la IA disponible para este partido en la hoja de cálculo.</p>`;const combined=getCombinedPrediction(stats,event||{},matchData),combinedPrediction=$('combined-prediction');if(combinedPrediction)combinedPrediction.innerHTML=`<h3>${combined.header}</h3>${combined.body}`}
